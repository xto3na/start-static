/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/********** COLOR-SCHEME *************/
/********** COLOR-SCHEME END *************/
@font-face {
  font-family: 'Ubuntu';
  src: url("../fonts/Ubuntu-R.ttf") format("truetype"); }

input[type="checkbox"],
input[type="radio"] {
  opacity: 0;
  outline: none;
  -ms-touch-action: none;
  touch-action: none; }

label {
  -ms-touch-action: none;
  touch-action: none; }

input[class^="custom-check__checkbox"] + span[class^="custom-check__checkbox"] > span[data-ripple="true"]::before,
span[data-ripple="true"]::before {
  background-color: rgba(177, 230, 254, 0.9);
  border-radius: 50%;
  content: '';
  display: block;
  height: 100%;
  opacity: 0;
  width: 100%; }

input[class^="custom-check__checkbox"]:checked + span[class^="custom-check__checkbox"] > span[data-ripple="true"]::before,
input[class^="custom-check__checkbox"]:checked + span[data-ripple="true"]::before {
  -webkit-animation: ripple .4s ease .1s 1 normal forwards;
  animation: ripple .4s ease .1s 1 normal forwards; }

.custom-check {
  color: #727272;
  display: block;
  font-size: 1.1rem;
  font-weight: 400;
  height: 1.2em;
  margin: .6em auto;
  position: relative;
  text-align: left;
  width: 95%; }

.custom-check__checkbox {
  border-radius: .125em;
  box-sizing: border-box;
  display: block;
  height: 1.1em;
  left: 0;
  position: absolute;
  top: 0;
  width: 1.1em; }

.custom-check__text {
  cursor: pointer;
  display: block;
  height: 1.1em;
  left: 0;
  lineheight: 1.1em;
  margin-top: -.02em;
  padding-left: 1.7em;
  position: absolute;
  text-align: left;
  top: 0; }

@media screen and (max-width: 30em) {
  .custom-check {
    font-size: 1.5rem; } }

.check-C__background {
  background-color: #b1e6fe;
  border-radius: .125em;
  -webkit-transition: all .2s ease-in-out;
  transition: all .2s ease-in-out; }

.check-C:checked + .check-C__background {
  -webkit-animation: bouncing-item .5s ease-in-out 0s 1 normal forwards;
  animation: bouncing-item .5s ease-in-out 0s 1 normal forwards;
  background-color: #03a9f4;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24); }

.check-C__checkbox {
  border: solid .125em #fff;
  border-radius: 0;
  border-right: none;
  border-top: none;
  height: .33em;
  left: .22em;
  top: .3em;
  -webkit-transform: rotate(-45deg);
  -ms-transform: rotate(-45deg);
  transform: rotate(-45deg);
  width: .66em; }

.check-C:checked + .check-C__background + .check-C__checkbox {
  box-shadow: -1px 1px 1px rgba(0, 0, 0, 0.1); }

.radio-C__background {
  background-color: #fff;
  border: solid .125em #03a9f4;
  border-radius: 50%;
  -webkit-transition: all .3s ease-in;
  transition: all .3s ease-in; }

.radio-C:checked + .radio-C__background {
  background-color: #03a9f4;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24); }

.radio-C__checkbox {
  border-radius: 50%;
  -webkit-transform: scale(0);
  -ms-transform: scale(0);
  transform: scale(0);
  -webkit-transition: all .3s ease-in;
  transition: all .3s ease-in; }

.radio-C:checked + .radio-C__background + .radio-C__checkbox {
  -webkit-animation: bouncing-item .5s ease-in-out .2s 1 normal forwards;
  animation: bouncing-item .5s ease-in-out .2s 1 normal forwards;
  background-color: #03a9f4;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1); }

.switch-C {
  margin: 1em 0; }

.switch-C__checkbox {
  cursor: pointer; }

.switch-C__text {
  display: inline-block;
  margin-right: 1.5em;
  padding: 0;
  position: relative; }

.switch-C__background {
  background-color: #d3d3d3;
  border: solid 0.0625em rgba(250, 250, 250, 0);
  border-radius: 999px;
  display: inline-block;
  position: relative;
  top: .15em;
  -webkit-transform: scale(1.4);
  -ms-transform: scale(1.4);
  transform: scale(1.4);
  -webkit-transition: all .3s ease-in-out;
  transition: all .3s ease-in-out;
  width: 2.2em; }

.switch-C__checkbox {
  background-color: #f1f1f1;
  border-radius: 50%;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
  left: -2%;
  top: -.0625em;
  -webkit-transform: scale(0.75);
  -ms-transform: scale(0.75);
  transform: scale(0.75);
  -webkit-transition: all .3s ease-in-out;
  transition: all .3s ease-in-out; }

.switch-C:checked + .switch-C__background {
  background-color: #b1e6fe; }

.switch-C:checked + .switch-C__background > .switch-C__checkbox {
  background-color: #03a9f4;
  left: 50%; }

@media screen and (max-width: 30em) {
  .switch-C__text {
    margin-right: 1.1em; } }

@-webkit-keyframes ripple {
  0% {
    opacity: .5;
    -webkit-transform: scale(0);
    transform: scale(0); }
  25% {
    opacity: .7;
    -webkit-transform: scale(1.5);
    transform: scale(1.5); }
  50% {
    opacity: .8;
    -webkit-transform: scale(2.2);
    transform: scale(2.2); }
  60% {
    opacity: .7;
    -webkit-transform: scale(3);
    transform: scale(3); }
  70% {
    opacity: .5;
    -webkit-transform: scale(2);
    transform: scale(2); }
  100% {
    -webkit-transform: scale(0);
    transform: scale(0);
    opacity: 0; } }

@keyframes ripple {
  0% {
    opacity: .5;
    -webkit-transform: scale(0);
    transform: scale(0); }
  25% {
    opacity: .7;
    -webkit-transform: scale(1.5);
    transform: scale(1.5); }
  50% {
    opacity: .8;
    -webkit-transform: scale(2.2);
    transform: scale(2.2); }
  60% {
    opacity: .7;
    -webkit-transform: scale(3);
    transform: scale(3); }
  70% {
    opacity: .5;
    -webkit-transform: scale(2);
    transform: scale(2); }
  100% {
    -webkit-transform: scale(0);
    transform: scale(0);
    opacity: 0; } }

@-webkit-keyframes bouncing-item {
  10%,
  50%,
  80%,
  100% {
    -webkit-transform: scale(1);
    transform: scale(1); }
  30% {
    -webkit-transform: scale(1.2);
    transform: scale(1.2); }
  70% {
    -webkit-transform: scale(1.1);
    transform: scale(1.1); }
  90% {
    -webkit-transform: scale(1.05);
    transform: scale(1.05); } }

@keyframes bouncing-item {
  10%,
  50%,
  80%,
  100% {
    -webkit-transform: scale(1);
    transform: scale(1); }
  30% {
    -webkit-transform: scale(1.2);
    transform: scale(1.2); }
  70% {
    -webkit-transform: scale(1.1);
    transform: scale(1.1); }
  90% {
    -webkit-transform: scale(1.05);
    transform: scale(1.05); } }

/*# sourceMappingURL=data:application/json;base64, */
